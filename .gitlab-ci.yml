variables:
  ROS_LANG_DISABLE: genlisp:geneus:gennodejs

  ########### Part that needs to be overwrite for each documentation ###########

  # Documentation name
  DOCUMENTATION_NAME: ros
  
  DOCUMENTATION_OUTPUT_FOLDER: "output_build"

  ##############################################################################

  # Allow to pull the directory containing front-end files
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_STRATEGY: fetch
  GIT_DEPTH: 0
  NIRYO_HOME_FOLDER: /home/niryo/catkin_ws
  GET_SOURCES_ATTEMPTS: 3
  CATKIN_PROFILE_NAME: debug
  

stages:
  - build
  - documentation
  - test
  - upload
  - release_gitlab

image: registry.gitlab.com/niryo/niryo-one-s/ned_ros_stack/ned2:amd64

.abstract_catkin_build:
  stage: build
  retry:
    max: 1
  script:
    # Create whole path folders
    - mkdir -p ${NIRYO_HOME_FOLDER}/src
    # moving everything in src folder
    - shopt -s extglob # Allow to use regex
    - mv !(src) ${NIRYO_HOME_FOLDER}/src/
    ######################################
    - cd ${NIRYO_HOME_FOLDER}
    # quick fix to add install space and allow documentation generation (should be done in docker image instead)
    - catkin config --profile ${CATKIN_PROFILE_NAME} --install
    # we need to first build the packages before building tests
    - catkin build --profile ${CATKIN_PROFILE_NAME}
    - catkin build --profile ${CATKIN_PROFILE_NAME} --make-args tests
    - cd -
    - mv ${NIRYO_HOME_FOLDER}/* .

catkin_make_amd:
  extends: .abstract_catkin_build
  artifacts:
    paths:
      - devel
      - src
      - build
      - install

catkin_make_arm:
  image: registry.gitlab.com/niryo/niryo-one-s/ned_ros_stack/ned2:arm64
  extends: .abstract_catkin_build
  rules:
    - if: $CI_COMMIT_BRANCH
      when: manual
      allow_failure: true

  artifacts:
    paths:
      - devel
      - src
      - build
      - install

build_doc_job:
  image: registry.gitlab.com/niryo/dockers/build_docs/ned_ros_stack:v1.0.4
  dependencies:
    - catkin_make_amd
  stage: documentation
  retry:
    max: 1
  before_script:
    - pip3 install -U pyyaml rospkg
  script:
    # Do stuff to move source properly for catkin_make
    - !reference [.abstract_move_source_tricks_job, script]
    - cd src/sphinx_doc
    # Build documentation without todo printing in final document
    - scripts/build_docs.sh -D todo_include_todos=0 -o ${DOCUMENTATION_OUTPUT_FOLDER}
    - scripts/generate_pdf.sh -o ${DOCUMENTATION_OUTPUT_FOLDER}/generated_pdfs
    - mv ${NIRYO_HOME_FOLDER}/* ${previous_path}
  after_script:
    - mv src/sphinx_doc/${DOCUMENTATION_OUTPUT_FOLDER} ${DOCUMENTATION_OUTPUT_FOLDER}
  artifacts:
    paths:
      - ${DOCUMENTATION_OUTPUT_FOLDER}

.abstract_move_source_tricks_job:
  stage: test
  dependencies: 
    - catkin_make_amd
  script:
    # Quick fix for changing "ROS folder "
    - previous_path=`pwd`
    - mkdir -p ${NIRYO_HOME_FOLDER}
    - cd ${NIRYO_HOME_FOLDER}
    - mv ${previous_path}/src .
    - mv ${previous_path}/install .
    - mv ${previous_path}/build .
    - mv ${previous_path}/devel .
    ################# Quickfix end ###############
    - source install/release/setup.bash
  after_script:
    - mv ${NIRYO_HOME_FOLDER}/* .

test_job:
  stage: test
  dependencies: 
    - catkin_make_amd
  artifacts:
    when: always
    paths:
        - build/release/*/test_results/*/rostest-*.xml
        - build/release/*/test_results/*/gtest-*.xml
        - build/release/*/test_results/*/rosunit-*.xml
    reports:
      junit:
        - build/release/*/test_results/*/rostest-*.xml
        - build/release/*/test_results/*/gtest-*.xml
        - build/release/*/test_results/*/rosunit-*.xml
  script:
    # Do stuff to move source properly for catkin_make
    - !reference [.abstract_move_source_tricks_job, script]
    # Launch roscore in background
    - roscore&

    # Launch all tests (python / C++)
    # Note: Without -j1, multiple jobs was running and problems occured for xml results output files
    # (sometimes a part of file was duplicated and unreadable by scripts then)
    - catkin run_tests -j1
  after_script:
    - !reference [.abstract_move_source_tricks_job, after_script]

roslint_job:
  stage: test
  dependencies: 
    - catkin_make_amd
  script:
    # Do stuff to move source properly for catkin_make
    - !reference [.abstract_move_source_tricks_job, script]
    # Check code linting
    - catkin build --make-args roslint -j1

catkin_lint_job:
  stage: test
  dependencies:
    - catkin_make_amd
  script:
    # Do stuff to move source properly for catkin_make
    - !reference [.abstract_move_source_tricks_job, script]
    # Check code linting
    - catkin lint -W2 --rosdistro melodic --ignore missing_directory --explain src

code_coverage_cpp_job:
  stage: test
  dependencies:
    - catkin_make_amd
  ## TO DELETE
  needs:
    - catkin_make_amd
  ## ------------
  tags:
    - local_corentin
  variables:
    SCRIPT_PATH: development-tools/Code_Analysis/build_code_coverage.sh
  script:
    # Do stuff to move source properly for catkin_make
    - !reference [.abstract_move_source_tricks_job, script]
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/niryo/niryo-one-s/development-tools.git
    - ./${SCRIPT_PATH} -p ${CATKIN_PROFILE_NAME}

## See https://docs.gitlab.com/ee/user/project/merge_requests/code_quality.html
include:
  - template: Code-Quality.gitlab-ci.yml

code_quality:
  tags:
    - dind
  artifacts:
    paths: [gl-code-quality-report.json]
  # Authenticate with account to not be limited by docker hub pull rate limit
  before_script:
   - docker login -u ${DOCKER_HUB_DOCKER_ID} -p ${DOCKER_HUB_PASSWORD}

code_quality_html:
  extends: code_quality
  variables:
    REPORT_FORMAT: html
  artifacts:
    paths: [gl-code-quality-report.html]
##

.abstract_upload:
  before_script:
    - mv ${DOCUMENTATION_OUTPUT_FOLDER} ${CI_COMMIT_TAG}
  script:
    - apt update
    # Install jq (json CLI for bash) + LFTP
    - apt install -y --no-install-recommends jq wget lftp
    # Bash script that creates a versions.json file locally (it adds versions to existing file)
    - ./.gitlab_resources/setup_versions_file.bash ${BASE_FOLDER_DOC_URL}/${DOCUMENTATION_NAME} $CI_COMMIT_TAG
    # Create .htaccess that will redirects from "X/index.html" to "X/last_version/en/index.html"
    - |
      echo \
      "RewriteEngine on

      # Redirect index.html with lang fr to last version in fr
      RewriteCond %{QUERY_STRING} ^lang=fr$
      RewriteRule ^index.html$ ${BASE_FOLDER_DOC_URL}/${DOCUMENTATION_NAME}/$CI_COMMIT_TAG/fr/index.html [R=301,NC]

      # Redirect index.html to last version
      RewriteCond %{QUERY_STRING} ^$
      RewriteRule ^index.html$ ${BASE_FOLDER_DOC_URL}/${DOCUMENTATION_NAME}/$CI_COMMIT_TAG/en/index.html [R=301,NC]

      ErrorDocument 403 ${BASE_FOLDER_DOC_URL}/${DOCUMENTATION_NAME}/$CI_COMMIT_TAG/en/index.html

      # Disable directory listing when accessing directy folder web address
      Options -Indexes
      " > .htaccess_last_version_default_language
    - mkdir -p source
      # Create .htaccess that will redirects from "X/source/index.html" to "X/last_version/en/index.html"
    - |
      echo \
      "RewriteEngine on

      # Redirect everything after the "source/" to the proper latest link (fr language)
      RewriteCond %{QUERY_STRING} ^lang=fr$
      RewriteRule ^(.+)$ ${BASE_FOLDER_DOC_URL}/${DOCUMENTATION_NAME}/$CI_COMMIT_TAG/fr/source/\$1 [R=301,NC]

      # Redirect everything after the "source/" to the proper latest link
      RewriteCond %{QUERY_STRING} ^$
      RewriteRule ^(.+)$ ${BASE_FOLDER_DOC_URL}/${DOCUMENTATION_NAME}/$CI_COMMIT_TAG/en/source/\$1 [R=301,NC]

      # Disable directory listing when accessing directy folder web address
      Options -Indexes
      " > .htaccess_old_url_to_default_language
    # Deploy new doc through LFPT
    - lftp -u ${FTP_USERNAME},${FTP_PASSWORD} ${FTP_URL} << EOF
    # Send to root folder for this documentation
    - cd ${TARGET_FOLDER_OVH}/${DOCUMENTATION_NAME} || exit 1
    # Send whole folder for this new version
    - mirror -c -R $CI_COMMIT_TAG
    # Send updated versions json file
    - put versions.json
    # Send the default redirecting to en language
    - put .htaccess_last_version_default_language -o .htaccess
    # Create source folder if it doesn't exists
    - mkdir -f source
    # Send "dummy" folder that redirects (htaccess) to new url with language
    - put -O source .htaccess_old_url_to_default_language -o .htaccess
    # Quit lftp
    - quit
    # EOF because it's in stdin 'input' mode
    - EOF

upload_staging_job:
  image: registry.gitlab.com/niryo/dockers/build_docs/base:v1.0.4
  stage: upload
  environment:
    name: staging
    deployment_tier: staging
  variables:
    BASE_FOLDER_DOC_URL: https://staging.docs.niryo.com/dev
    TARGET_FOLDER_OVH: ~/docs_staging/dev
    CI_COMMIT_TAG: v0.0.1
  rules:
    - if: $CI_COMMIT_BRANCH
      when: manual
      allow_failure: true
  dependencies:
    - build_doc_job
  needs:
    - build_doc_job
  extends: .abstract_upload

upload_production_job:
  rules:
    ## Just in case we would restrict to master (https://stackoverflow.com/a/64448994)
    # If a it's a tag && protected tag
    - if: $CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED == "true"

  image: registry.gitlab.com/niryo/dockers/build_docs/base:v1.0.4
  stage: upload
  environment:
    name: production
    deployment_tier: production
  variables:
    BASE_FOLDER_DOC_URL: https://docs.niryo.com/dev
    TARGET_FOLDER_OVH: ~/docs/dev
  dependencies:
    - build_doc_job
  needs:
    - build_doc_job
  extends: .abstract_upload

release_gitlab_job:
  image: registry.gitlab.com/gitlab-org/release-cli:v0.8.0
  rules:
    ## Just in case we would restrict to master (https://stackoverflow.com/a/64448994)
    # If a it's a tag && protected tag
    - if: $CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED == "true"
  environment:
    name: production
    deployment_tier: production
  stage: release_gitlab
  retry:
    max: 2
  script:
    - release-cli create  --name="Release $CI_COMMIT_TAG" --description="Release created automatically by Gitlab pipeline at $CI_PIPELINE_URL" --tag-name=$CI_COMMIT_TAG
